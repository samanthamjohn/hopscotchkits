["{\"bonus\":false,\"created_at\":\"2012-01-02T23:58:19Z\",\"description\":\"To start out, we will need to create an svg. An svg is commonly used by programmers creating online games. \",\"freeplay\":false,\"hint\":\"Try using Raphael, an excellent drawing library for javascript on the web. \\r\\n\\r\\nTo create a Raphael paper (or svg) Raphael(0,0,300,300)\",\"id\":5,\"image_url\":null,\"kit_id\":2,\"more_info\":null,\"position\":1,\"solution\":null,\"spec\":\"-> $(\\\"svg\\\").length > 0\",\"success_message\":\"good job! You've made your canvas. Now let's put something on it!\",\"title\":\"Let start at the very beginning, a very good place to start.\",\"updated_at\":\"2012-01-04T21:18:07Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-02T23:58:19Z\",\"description\":\"For your tic-tac-toe game, you'll need to create boxes where someone can click to play their turn. Let's create the first box!\",\"freeplay\":false,\"hint\":null,\"id\":6,\"image_url\":null,\"kit_id\":2,\"more_info\":null,\"position\":2,\"solution\":null,\"spec\":\"-> $(\\\"svg rect\\\").length > 0\",\"success_message\":\"Wonderful, you made the first box!\",\"title\":null,\"updated_at\":\"2012-01-03T23:34:13Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-03T23:58:18Z\",\"description\":\"This is great. Now we need 9 boxes. See if you can create them in a clever way. \",\"freeplay\":false,\"hint\":null,\"id\":7,\"image_url\":null,\"kit_id\":2,\"more_info\":null,\"position\":3,\"solution\":null,\"spec\":\"-> $(\\\"svg rect\\\").length == 9\",\"success_message\":\"woohoo! 9 rectangles. wowza\",\"title\":null,\"updated_at\":\"2012-01-03T23:58:18Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-04T04:07:51Z\",\"description\":\"Now make sure they are not on top of each other. \",\"freeplay\":false,\"hint\":null,\"id\":8,\"image_url\":null,\"kit_id\":2,\"more_info\":null,\"position\":4,\"solution\":null,\"spec\":\"->\\r\\n  x_attrs =  _.map($(\\\"svg rect\\\"), (i) ->  $(i).attr('x') )\\r\\n  y_attrs = _.map($(\\\"svg rect\\\"), (i) ->  $(i).attr('y') )\\r\\n  heights = _.map($(\\\"svg rect\\\"), (i) ->  $(i).attr('height') )\\r\\n  widths = _.map($(\\\"svg rect\\\"), (i) ->  $(i).attr('width') )\\r\\n \\r\\n  sortedX = _.sortBy(x_attrs, (i) -> i)\\r\\n  sortedY = _.sortBy(y_attrs, (i) -> i)\\r\\n\\r\\n  if _.isEqual(_.uniq(sortedX), [\\\"0\\\",  \\\"100\\\",  \\\"200\\\"]) && _.isEqual(sortedY, sortedX)\\r\\n    _.isEqual(_.uniq(heights), [\\\"100\\\"]) && _.isEqual(_.uniq(widths), [\\\"100\\\"])\",\"success_message\":\"Woohoo, all the rectangles are in the right spot!\",\"title\":null,\"updated_at\":\"2012-01-04T04:26:35Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-05T22:15:35Z\",\"description\":\"Before we can draw a puppy, we need something to draw it on.  Type this: \\r\\n\\r\\n<code>makeWorkspace() </code>\\r\\n\\r\\ninto the code editor below, then hit \\\"Run This\\\".\\r\\n\",\"freeplay\":false,\"hint\":\"Make sure you copied it exactly, the code is case sensitive (\\\"case sensitive\\\" means it matters whether it is upper case or lower case).\",\"id\":9,\"image_url\":\"\",\"kit_id\":3,\"more_info\":null,\"position\":1,\"solution\":\"makePaper()\",\"spec\":\"assert(( -> $frame.find(\\\"svg\\\").length > 0), \\\"add the paper to the page\\\")\",\"success_message\":\"You just made an HTML canvas. That's the latest fancy thing your browser can do- using a canvas lets you draw on a website!\",\"title\":\"The drawing board\",\"updated_at\":\"2012-02-17T21:01:42Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-05T22:39:34Z\",\"description\":\"To draw the face, we'll use an oval, also called an ellipse. \\r\\n\\r\\nBut first we need to save what you just made to a variable (like a nickname, so we can tell it to do stuff later).  Let's call it \\\"paper.\\\"\\r\\n\\r\\nGo back to line 1 and change it to say: \\r\\n\\r\\n<code>paper = makeWorkspace()</code>\\r\\n\\r\\nNow that you gave it a name, the computer will know what you're talking about when you want to call a method on it.  \\r\\n\\r\\nLet's call the <code> .ellipse </code> method on your new \\\"paper\\\".  Go to line 2 and type:\\r\\n\\r\\n<code>paper.ellipse(200, 200, 60, 80)</code>\\r\\n\",\"freeplay\":false,\"hint\":\"Make sure you've typed all of your code exactly as above and kept all the capitalizations and symbols the same.  \",\"id\":10,\"image_url\":\"step2.png\",\"kit_id\":3,\"more_info\":null,\"position\":2,\"solution\":\"paper = makeWorkspace()\\r\\npaper.ellipse(200,200,60,80)\",\"spec\":\"assert((->$frame.find(\\\"svg ellipse\\\").length > 0), 'Add an ellipse for the face')\\r\\n\\r\\nassert((->$frame.find(\\\"svg ellipse\\\").first().attr(\\\"rx\\\") == \\\"60\\\"), \\\"Make the width 60\\\")\\r\\n\\r\\nassert((->$frame.find(\\\"svg ellipse\\\").first().attr(\\\"ry\\\") == \\\"80\\\"), \\\"Make the height 80\\\")\\r\\n\",\"success_message\":\"You just drew an ellipse on the page. An ellipse is like a circle but more stretched out. Remember- you wrote <code>paper.ellipse</code> with four numbers. The first two numbers were x and y. The second two were width and height. If you made width and height the same you would have a circle! \",\"title\":\"Puppy Face\",\"updated_at\":\"2012-02-17T21:04:50Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T00:39:08Z\",\"description\":\"Now we want to make the puppy's face brown. \\r\\n\\r\\nRemember how you saved your workspace as \\\"<code>paper</code>\\\"?\\r\\n\\r\\nNow you need to name your ellipse something.  How about\\\"<code>face</code>\\\"?  Change your second line to:\\r\\n\\r\\n<code> face = paper.ellipse(200,200,60,80) </code>\\r\\n\\r\\n\\r\\nNow we can set the color. We can use face.attr (short for <span style='font-style:italic'>attribute</span>) to set the color. \\r\\n\\r\\n<code>face.attr(\\\"fill\\\", \\\"saddlebrown\\\")</code>\\r\\n\",\"freeplay\":false,\"hint\":\"Go back to line 2 and assign the variable <code>face</code> to <code>paper.ellipse(200,200,60,80)</code> by typing <code>face = </code> in front of it.  \",\"id\":12,\"image_url\":\"\",\"kit_id\":3,\"more_info\":null,\"position\":3,\"solution\":\"paper = makeWorkspace()\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\",\"spec\":\"assert(( -> _.find($frame.find(\\\"svg ellipse\\\"),((e)-> $(e).attr(\\\"fill\\\").match(/#/i)))), \\\"Set the face color to saddlebrown\\\")\",\"success_message\":\"You added color to the puppy's face by setting the <code>fill</code> attribute (that's what it means when you type <code>attr</code>) of it's face. We used saddlebrown but you can try other colors as well if you like. (try <a href='http://www.w3schools.com/html/html_colornames.asp' target='_blank'>this!</a>)\",\"title\":\"Adding Some Color\",\"updated_at\":\"2012-02-17T21:13:14Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T00:48:29Z\",\"description\":\"Our puppy needs ears. Let's make 2 ellipses on the side of the head. \\r\\n\\r\\nHere's the code for the left ear.  Try the right one on your own.\\r\\n\\r\\n<code>leftEar=paper.ellipse(150,215,40,80)</code>\\r\\n\\r\\nRemember: the ellipse parameters are: \\r\\n<code>paper.ellipse(<span style='color:Green '>\\r\\nx coordinate, \\r\\ny coordinate</span>, <span style='color:royalblue'>\\r\\nwidth, \\r\\nheight</blue>)</code>\",\"freeplay\":false,\"hint\":\"<code>rightEar=paper.ellipse(250,215,40,80)</code>\\r\\n\",\"id\":13,\"image_url\":\"step4.jpg\",\"kit_id\":3,\"more_info\":null,\"position\":4,\"solution\":\"paper = makeWorkspace()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\n\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\",\"spec\":\"assert( (-> ($frame.find(\\\"svg ellipse\\\").length > 2)), \\\"Add 2 new ellipses for the ears.\\\")\\r\\n\\r\\nassert( (-> ($frame.find(\\\"svg ellipse[cx=150]\\\").length != 2)), \\\"Set the x-coordinate (first number in the ellipse method) to be different for the second ear.\\\")\\r\\n\\r\\n\\r\\nassert( (-> \\r\\n  ellipses = 0\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    if $(ellipse).attr(\\\"rx\\\") > 35 && $(ellipse).attr('rx') < 45\\r\\n      ellipses += 1\\r\\n  )\\r\\n  if ellipses < 2\\r\\n    return false\\r\\n  else\\r\\n    return true\\r\\n), \\\"Give ears x-radius (the third number in the ellipse method) of approximately 40\\\")\\r\\n\\r\\n\\r\\nassert( (-> \\r\\n  ellipses = 0\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    if $(ellipse).attr(\\\"ry\\\") > 75 && $(ellipse).attr('ry') < 85\\r\\n      ellipses += 1\\r\\n  )\\r\\n  if ellipses < 2\\r\\n    return false\\r\\n  else\\r\\n    return true\\r\\n), \\\"Give ears y-radius (the fourth number in the ellipse method) of approximately 80\\\")\",\"success_message\":\"You've added 2 new ellipses to your page for the ears. Are you getting the hang of the ellipse method? Again- the first two numbers are x and y (you can see them in the grid). The last two are width and height to give the ellipse size and stretch it out.\",\"title\":\"Do your ears hang low?\",\"updated_at\":\"2012-02-17T21:14:44Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T15:41:50Z\",\"description\":\"Let's make the ears brown, the same shade as the face. Do you remember how to do this? \\r\\n\\r\\nMake sure the ears are *behind* the head, we don't want the backs of the ears sticking over the face.  Try experimenting by moving the lines of code into a different order to make this work.     \",\"freeplay\":false,\"hint\":\"The computer reads the code you've written from the top down, so to move the ears behind the head, you need to draw them first, before the face.  \\r\\n\\r\\nCut and paste the lines of code for \\\"rightEar\\\" and \\\"leftEar\\\" and move them above the code for \\\"face\\\".  \",\"id\":14,\"image_url\":\"step5.png\",\"kit_id\":3,\"more_info\":null,\"position\":5,\"solution\":\"paper = makeWorkspace()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\nleftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\nrightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\",\"spec\":\"assert( (-> \\r\\n  brownEllipses = 0\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    if $(ellipse).attr(\\\"fill\\\").match(/#/i) \\r\\n      brownEllipses += 1\\r\\n  )\\r\\n  if brownEllipses < 3\\r\\n    return false\\r\\n  else\\r\\n    return true\\r\\n), \\\"Make both ears saddle brown in color\\\")\",\"success_message\":\"You have set the <code>fill</code> attribute of each ear. Before they were clear, now they are colored in! Try customizing your puppy with different colors. (<a href='http://www.w3schools.com/html/html_colornames.asp' target='_blank'>color chart</a>).\",\"title\":\"Jazz up the ears\",\"updated_at\":\"2012-02-17T21:17:08Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T15:46:21Z\",\"description\":\"The ears look a little droopy- let's try to rotate them. \\r\\n\\r\\n<code> .ellipse </code> has a method called <code> .transform </code> where you can rotate the object.  The syntax is \\\"R\\\" followed by the number of degrees.  \\r\\n\\r\\nTry \\r\\n\\r\\n<code>rightEar.transform(\\\"R90\\\")</code>. \\r\\n\\r\\nNow adjust the angle so that it looks like the picture. \\r\\n\",\"freeplay\":false,\"hint\":\"For the left ear try <code>leftEar.transform(\\\"R-80\\\")</code>, see if you can adjust that negative angle to match the picture. \",\"id\":15,\"image_url\":\"step6.png\",\"kit_id\":3,\"more_info\":null,\"position\":6,\"solution\":\"paper = makeWorkspace()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\nleftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\nrightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\nleftEar.transform(\\\"R20\\\")\\r\\nrightEar.transform(\\\"R-20\\\")\\r\\n\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\",\"spec\":\"assert( (-> \\r\\n  rotatedEllipses = 0\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    if $(ellipse).attr(\\\"transform\\\") \\r\\n      rotatedEllipses += 1\\r\\n  )\\r\\n  if rotatedEllipses < 2\\r\\n    return false\\r\\n  else\\r\\n    return true\\r\\n), \\\"You need to rotate both ears\\\")\",\"success_message\":\"You successfully used <code>transform</code>. When you use \\\"R20\\\" you rotated the ear 20&deg; clockwise. When you use \\\"R-20\\\" you will rotate it 20&deg; counter-clockwise. Pretty cool huh?\",\"title\":\"Perk up the ears\",\"updated_at\":\"2012-02-17T21:18:30Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T16:15:57Z\",\"description\":\"Our puppy needs eyes. Let's make a white ellipse for the eye with a black circle in the middle for the pupil. Try to make it look like the picture. \\r\\n\\r\\nYou can make a circle either by creating an ellipse with equal width and height or calling the circle method that only takes a radius. \",\"freeplay\":false,\"hint\":\"Try this for the left eye, see if you can mirror it on the right. \\r\\n\\r\\n<code>\\r\\nleftEyeOuter = paper.ellipse(175, 175, 12,15)\\r\\nleftEye = paper.circle(175, 170, 7)\\r\\n</code>\",\"id\":16,\"image_url\":\"step7.png\",\"kit_id\":3,\"more_info\":null,\"position\":7,\"solution\":\"paper = makeWorkspace()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\nleftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\nrightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\nleftEar.transform(\\\"R20\\\")\\r\\nrightEar.transform(\\\"R-20\\\")\\r\\n\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\\r\\n\\r\\nleftEyeOuter = paper.ellipse(175, 175, 12,15).attr('fill', 'white')\\r\\nleftEye = paper.circle(175, 170, 7).attr('fill', 'black')\\r\\nrightEyeOuter = paper.ellipse(225, 175, 12,15).attr('fill', 'white')\\r\\nrightEye = paper.circle(225, 170, 7).attr('fill', 'black')\",\"spec\":\"assert( (-> \\r\\n  eyes = 0\\r\\n  pupils = $frame.find(\\\"svg circle\\\").length\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    if $(ellipse).attr(\\\"fill\\\").match(/#/i)\\r\\n      eyes += 1\\r\\n  )\\r\\n  if (eyes >= 5 && pupils == 2) || (pupils == 0 && eyes >= 7)\\r\\n    return true\\r\\n  else\\r\\n    return false\\r\\n), \\\"Make 2 eyes with pupils\\\")\",\"success_message\":\"Hopefully that additional practice using <code>ellipse</code> and <code>circle</code> have made you an expert. There's just one more thing to add and then you can let your creativity flow. \",\"title\":\"Puppy eyes\",\"updated_at\":\"2012-02-17T21:20:24Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T16:19:59Z\",\"description\":\"The last thing we need is a nose. \\r\\n\\r\\nLet's make a black, oblong oval at the end of the face. \",\"freeplay\":false,\"hint\":\"Try making the width (3rd parameter) bigger than the height (4th parameter). \",\"id\":17,\"image_url\":\"step8.png\",\"kit_id\":3,\"more_info\":null,\"position\":8,\"solution\":\"paper = makeWorkspace()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\nleftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\nrightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\nleftEar.transform(\\\"R20\\\")\\r\\nrightEar.transform(\\\"R-20\\\")\\r\\n\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\\r\\n\\r\\nleftEyeOuter = paper.ellipse(175, 175, 12,15).attr('fill', 'white')\\r\\nleftEye = paper.circle(175, 170, 7).attr('fill', 'black')\\r\\nrightEyeOuter = paper.ellipse(225, 175, 12,15).attr('fill', 'white')\\r\\nrightEye = paper.circle(225, 170, 7).attr('fill', 'black')\\r\\n\\r\\nnose = paper.ellipse(200, 273, 25,10).attr('fill', 'black')\\r\\n\",\"spec\":\"assert( (-> \\r\\n  nose = false\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    if parseInt($(ellipse).attr(\\\"rx\\\"), 10) > parseInt($(ellipse).attr('ry'), 10)\\r\\n      nose = true\\r\\n  )\\r\\n  return nose\\r\\n), \\\"The nose should be wider than it is long\\\")\\r\\n\\r\\n\\r\\nassert( (-> \\r\\n  nose = false\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    if parseInt($(ellipse).attr(\\\"rx\\\"),10) > parseInt($(ellipse).attr('ry'), 10) \\r\\n      x = parseInt($(ellipse).attr(\\\"cx\\\"), 10)\\r\\n      if x >= 180 && x <= 220\\r\\n        nose = true\\r\\n  )\\r\\n  return nose\\r\\n), \\\"The nose should be more centered\\\")\\r\\n\\r\\nassert( (-> \\r\\n  nose = false\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    if parseInt($(ellipse).attr(\\\"rx\\\"),10) > parseInt($(ellipse).attr('ry'), 10) \\r\\n      y = parseInt($(ellipse).attr(\\\"cy\\\"), 10)\\r\\n      if y <= 280\\r\\n        nose = true\\r\\n  )\\r\\n  return nose\\r\\n), \\\"The nose should be farther up\\\")\\r\\n\\r\\nassert( (-> \\r\\n  nose = false\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    y = parseInt($(ellipse).attr(\\\"cy\\\"), 10)\\r\\n    if y >= 270\\r\\n      nose = true\\r\\n  )\\r\\n  return nose\\r\\n), \\\"The nose should be farther down\\\")\\r\\n\\r\\nassert( (-> \\r\\n  nose = false\\r\\n  _.each($frame.find(\\\"svg ellipse\\\"), (ellipse)-> \\r\\n    if parseInt($(ellipse).attr(\\\"rx\\\"),10) > parseInt($(ellipse).attr('ry'), 10) \\r\\n      if $(ellipse).attr(\\\"fill\\\").match(/#/i)\\r\\n        nose = true\\r\\n  )\\r\\n  return nose\\r\\n), \\\"Give the nose a color.\\\")\",\"success_message\":\"Your puppy is complete- now click Next to see your very own website with for your puppy. You can give her a name, share with your friends and even come back and keep coding to make your puppy even better. \",\"title\":\"The nose knows\",\"updated_at\":\"2012-02-17T21:22:23Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T00:39:08Z\",\"description\":\"Now we need to make our dog a nice shade of brown. We want to set the oval's \\\"fill\\\" attribute to \\\"saddlebrown\\\". We change attributes of the ellipse with the \\\"attr\\\" method.\\r\\n\\r\\n<code>face.attr(\\\"fill\\\", \\\"saddlebrown\\\")</code>\\r\\n\\r\\nyou will want to assign the \\\"face\\\" variable to your ellipse so that you can call attr.\",\"freeplay\":false,\"hint\":\"Try typing in the code block and make sure you've assigned face to the ellipse. \",\"id\":18,\"image_url\":null,\"kit_id\":4,\"more_info\":null,\"position\":3,\"solution\":\"paper = makePaper()\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\",\"spec\":\"assert((->$(\\\"svg ellipse\\\").attr(\\\"fill\\\").match(/#8B4513/i)), \\\"Uh oh, the puppy isn't the right brown :(\\\")\",\"success_message\":\"Look at that vicious dawg! \",\"title\":\"Adding Some Color\",\"updated_at\":\"2012-01-06T00:44:17Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T00:48:29Z\",\"description\":\"Our puppy needs ears. Let's make 2 ellipses on the side of the head. See if you can put the ears behind the head. \",\"freeplay\":false,\"hint\":\"Try making ellipses just a little smaller than the head and offset on the center coordinate (that's the first argument). \",\"id\":19,\"image_url\":null,\"kit_id\":4,\"more_info\":null,\"position\":4,\"solution\":\"paper = makePaper()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\nleftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\nrightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\",\"spec\":\"assert( (-> ($(\\\"svg ellipse\\\").length == 3)), \\\"You need 2 ears. No more, no less.\\\")\",\"success_message\":\"Woof! You hear that? your dog did. \",\"title\":\"Do your ears hang low?\",\"updated_at\":\"2012-01-06T00:54:32Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T15:41:50Z\",\"description\":\"First, let's make the ears brown, the same shade as the face. Do you remember how to do this? \\r\\n\\r\\nMake sure the ears are *behind* the head, we don't want the backs of the ears sticking over the face. Try experimenting with moving the code around, maybe if you make the ears before the face they will be float behind it. \",\"freeplay\":false,\"hint\":\"Try using the .attr(\\\"fill\\\", \\\"saddlebrown\\\") method on each of the ears. \",\"id\":20,\"image_url\":null,\"kit_id\":4,\"more_info\":null,\"position\":5,\"solution\":\"paper = makePaper()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\nleftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\nrightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\",\"spec\":\"\",\"success_message\":\"Brown ears! Awesome!\",\"title\":\"Jazz up the ears\",\"updated_at\":\"2012-01-06T16:12:46Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T15:46:21Z\",\"description\":\"The ears look a little droopy- let's try to rotate them. \\r\\n\\r\\nA paper ellipse has a method called \\\"transform\\\" where you can pass in a string showing how you want to transform the object. If you pass in \\\"R\\\" for rotate followed by the number of degrees you want to rotate you can make the ears rotate around their center. \\r\\n\\r\\nTry rightEar.transform(\\\"R90\\\"). Now adjust the angle so that it looks like the picture. \\r\\n\\r\\nTry it with a negative angle for the left ear. \",\"freeplay\":false,\"hint\":\"For the left ear try leftEar.transform(\\\"R-80\\\"), see if you can adjust that negative angle to match the picture. \",\"id\":21,\"image_url\":null,\"kit_id\":4,\"more_info\":null,\"position\":6,\"solution\":\"paper = makePaper()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\nleftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\nrightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\nleftEar.transform(\\\"R20\\\")\\r\\nrightEar.transform(\\\"R-20\\\")\\r\\n\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\",\"spec\":\"\",\"success_message\":\"Looking good dawg. \",\"title\":\"Perk up the ears\",\"updated_at\":\"2012-01-06T16:12:08Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T16:15:57Z\",\"description\":\"Our puppy needs eyes. Let's make a white ellipse for the eye with a black circle in the middle for the pupil. Try to make it look like the picture. \\r\\n\\r\\nYou can make a circle either by creating an ellipse with equal width and height or calling the circle method that only takes a radius. \",\"freeplay\":false,\"hint\":\"Try this for the left eye, see if you can mirror it on the right. \\r\\n\\r\\n\\r\\nleftEyeOuter = paper.ellipse(175, 175, 12,15)\\r\\nleftEye = paper.circle(175, 170, 7)\",\"id\":22,\"image_url\":null,\"kit_id\":4,\"more_info\":null,\"position\":7,\"solution\":\"paper = makePaper()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\nleftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\nrightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\nleftEar.transform(\\\"R20\\\")\\r\\nrightEar.transform(\\\"R-20\\\")\\r\\n\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\\r\\n\\r\\nleftEyeOuter = paper.ellipse(175, 175, 12,15).attr('fill', 'white')\\r\\nleftEye = paper.circle(175, 170, 7).attr('fill', 'black')\\r\\nrightEyeOuter = paper.ellipse(225, 175, 12,15).attr('fill', 'white')\\r\\nrightEye = paper.circle(225, 170, 7).attr('fill', 'black')\",\"spec\":\"\",\"success_message\":\"I'm lookin' at you! \",\"title\":\"Puppy eyes\",\"updated_at\":\"2012-01-06T16:15:57Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-06T16:19:59Z\",\"description\":\"The last thing we need is a nose. \\r\\n\\r\\nLet's make a black, oblong oval at the end of the face. \",\"freeplay\":false,\"hint\":\"Try making the width (3rd parameter) bigger than the height (1st parameter). \",\"id\":23,\"image_url\":\"\",\"kit_id\":4,\"more_info\":null,\"position\":8,\"solution\":\"paper = makePaper()\\r\\n\\r\\nleftEar=paper.ellipse(150,215,40,80)\\r\\nleftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\nrightEar=paper.ellipse(250,215,40,80)\\r\\nrightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\nleftEar.transform(\\\"R20\\\")\\r\\nrightEar.transform(\\\"R-20\\\")\\r\\n\\r\\n\\r\\nface = paper.ellipse(200,200,60,80)\\r\\nface.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\\r\\n\\r\\nleftEyeOuter = paper.ellipse(175, 175, 12,15).attr('fill', 'white')\\r\\nleftEye = paper.circle(175, 170, 7).attr('fill', 'black')\\r\\nrightEyeOuter = paper.ellipse(225, 175, 12,15).attr('fill', 'white')\\r\\nrightEye = paper.circle(225, 170, 7).attr('fill', 'black')\\r\\n\\r\\nnose = paper.ellipse(200, 273, 25,10).attr('fill', 'black')\\r\\n\",\"spec\":\"assert((->true), 'hi')\",\"success_message\":\"Woohoo! You made a puppy face!! \",\"title\":\"The nose knows\",\"updated_at\":\"2012-01-12T17:27:48Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-05T22:15:35Z\",\"description\":\"Before we can draw a puppy, we need a piece of paper. To get your paper, type this: \\r\\n\\r\\n<code>makePaper() </code>\\r\\n\\r\\ninto the editor\",\"freeplay\":false,\"hint\":\"Make sure you copied it exactly, the code is case sensitive (\\\"case sensitive\\\" means it matters whether it is upper case or lower case).\",\"id\":24,\"image_url\":null,\"kit_id\":4,\"more_info\":null,\"position\":1,\"solution\":\"makePaper()\",\"spec\":\"assert(( -> $(\\\"svg\\\").length > 0), \\\"There's no paper on the page!\\\")\",\"success_message\":\"Woohoo! Now you're ready to start drawing.\",\"title\":\"The drawing board\",\"updated_at\":\"2012-01-06T23:26:04Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-05T22:39:34Z\",\"description\":\"The first thing we will draw is the face. We will use a long oval &emdash; also known as an <a href=\\\"http://www.merriam-webster.com/dictionary/ellipse\\\">ellipse</a>. \\r\\n\\r\\nYour paper has a method called ellipse but in order to use it we need a reference to the paper object. To do this we will set a variable. We set variables like so:\\r\\n\\r\\n<code>x = 1</code>\\r\\n\\r\\nNow the variable called <code>x</code> has the value 1. Try setting a variable called <code>paper</code> to the value of <code>makePaper()</code>. Once you've done that it would be a good time to click run it to see if you have that bit correct. Did it work? OK, now we need to draw our ellipse on the paper. Ellipses look like this:\\r\\n\\r\\n<code>paper.ellipse(center-horizontal, center-vertical, width, height)</code>\\r\\n\\r\\nwhere center-horizontal is the oval's position left to right on the paper, center-vertical is the oval's position top to bottom, and width and height control the size of the oval.\\r\\n\\r\\nLet's make an oval in the center of our paper, at center-vertical 200, center-horizontal 200, and with a width of 60 and a height of 80\",\"freeplay\":false,\"hint\":\"This would make an ellipse at 100 left, 100 down, and with a width of 40 and a height of 60:\\r\\n\\r\\npaper = makePaper()\\r\\npaper.ellipse(100, 100, 40, 60)\\r\\n\\r\\nHow can we make an ellipse at 200 left, 200 down, and with a width of 60 and a height of 80?\",\"id\":25,\"image_url\":null,\"kit_id\":4,\"more_info\":null,\"position\":2,\"solution\":\"paper = makePaper()\\r\\nface=paper.ellipse(200,200,60,80)\",\"spec\":\"assert(( -> \\r\\n  try\\r\\n    paper\\r\\n  catch error\\r\\n    false\\r\\n), \\\"You need to set a variable called paper\\\")\\r\\nassert((-> window._paper == paper), \\\"You need to set the paper variable equal to makePaper()\\\")\\r\\n\\r\\nassert((->$(\\\"svg ellipse\\\").length > 0), 'You need to add an ellipse by calling paper.ellipse()')\",\"success_message\":\"Great work. Our puppy has a head. He'll need that.\",\"title\":\"Puppy Face\",\"updated_at\":\"2012-01-06T23:44:12Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-10T02:04:33Z\",\"description\":\"We're going to start with the puppy from the previous kit. \\r\\n\\r\\nLet's save time and copy our code from last time: \\r\\n<code>\\r\\n\\r\\npaper = makePaper()\\r\\n\\r\\n  leftEar=paper.ellipse(150,215,40,80)\\r\\n  leftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n  rightEar=paper.ellipse(250,215,40,80)\\r\\n  rightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\n  leftEar.transform(\\\"R20\\\")\\r\\n  rightEar.transform(\\\"R-20\\\")\\r\\n\\r\\n  face = paper.ellipse(200,200,60,80)\\r\\n  face.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\\r\\n  leftEyeOuter = paper.ellipse(175, 175, 12,15).attr('fill', 'white')\\r\\n  leftEye = paper.ellipse(175, 170, 7, 7).attr('fill', 'black')\\r\\n  rightEyeOuter = paper.ellipse(225, 175, 12,15).attr('fill', 'white')\\r\\n  rightEye = paper.ellipse(225, 170, 7, 7).attr('fill', 'black')\\r\\n\\r\\n  nose = paper.ellipse(200, 273, 25,10).attr('fill', 'black')\\r\\n\\r\\n</code>\",\"freeplay\":false,\"hint\":\"We've put drawPuppy into a function. \",\"id\":26,\"image_url\":\"step8.png\",\"kit_id\":5,\"more_info\":null,\"position\":1,\"solution\":\"\\r\\npaper = makePaper()\\r\\n\\r\\n  leftEar=paper.ellipse(150,215,40,80)\\r\\n  leftEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n  rightEar=paper.ellipse(250,215,40,80)\\r\\n  rightEar.attr(\\\"fill\\\", \\\"saddleBrown\\\")\\r\\n\\r\\n  leftEar.transform(\\\"R20\\\")\\r\\n  rightEar.transform(\\\"R-20\\\")\\r\\n\\r\\n  face = paper.ellipse(200,200,60,80)\\r\\n  face.attr(\\\"fill\\\", \\\"saddlebrown\\\")\\r\\n\\r\\n  leftEyeOuter = paper.ellipse(175, 175, 12,15).attr('fill', 'white')\\r\\n  leftEye = paper.ellipse(175, 170, 7, 7).attr('fill', 'black')\\r\\n  rightEyeOuter = paper.ellipse(225, 175, 12,15).attr('fill', 'white')\\r\\n  rightEye = paper.ellipse(225, 170, 7, 7).attr('fill', 'black')\\r\\n\\r\\n  nose = paper.ellipse(200, 273, 25,10).attr('fill', 'black')\",\"spec\":\"assert(( -> $('svg').length > 0), \\\"Just copy in the code from the directions and make sure you indent the code inside the function.\\\")\\r\\n\\r\\nassert(( -> $('svg ellipse').length == 8), \\\"Make sure you copy *all* the code.\\\")\",\"success_message\":\"Woohoo! Cute dog. \",\"title\":\"Draw the puppy\",\"updated_at\":\"2012-01-10T02:17:31Z\"}", "{\"bonus\":false,\"created_at\":\"2012-01-13T03:43:16Z\",\"description\":\"Welcome to freeplay mode. \\r\\n\\r\\nYou can make your puppy do anything you want here. \\r\\n\\r\\nSome ideas of drawing methods you can use are: \\r\\n\\r\\n<code>paper.rect(center-x, center-y, width, height)</code>\\r\\n\\r\\n<code>paper.text(center-x, center-y, text)</code>\\r\\n\\r\\nYou can check <a href='http://raphaeljs.com/reference.html' target=\\\"_blank\\\">Raphael JS</a>, our drawing library for more info on these and many other methods. \\r\\n\\r\\nFor a list of colors we recommend this <a href=\\\"http://www.w3schools.com/html/html_colornames.asp\\\" target=\\\"_blank\\\"> color names table</a>. \\r\\n\\r\\nHappy  coding!\",\"freeplay\":true,\"hint\":\"No hints- just follow your heart!\",\"id\":27,\"image_url\":\"\",\"kit_id\":3,\"more_info\":null,\"position\":9,\"solution\":\"\",\"spec\":\"\",\"success_message\":\"\",\"title\":\"Let your creativity flow\",\"updated_at\":\"2012-01-13T16:34:10Z\"}", "{\"bonus\":false,\"created_at\":\"2012-02-15T14:56:56Z\",\"description\":\"If you were to write out a quiz, the first thing you'd need is a piece of paper to write it on.  Same thing with our computer quiz--you need the equivalent of a piece of paper.  \\r\\n\\r\\nSo the first set of instructions we need to give to the computer will make the paper for the quiz. \\r\\nSo first type this:\\r\\n\\r\\n<code>makeWorkspace()</code>\\r\\n\\r\\nand then hit \\\"run this\\\". \",\"freeplay\":false,\"hint\":\"Make sure you copied it exactly, when you're writing code it matters whether each letter is upper case or lower case. \\r\\n\",\"id\":28,\"image_url\":\"\",\"kit_id\":7,\"more_info\":null,\"position\":1,\"solution\":\"makeWorkspace()\",\"spec\":\"\",\"success_message\":\"What you've made by typing \\\"makeWorkspace()\\\" is an html canvas element.  It's the digital version of laying down a sheet of paper to begin writing on.\",\"title\":\"Creating the workspace\",\"updated_at\":\"2012-02-15T14:56:56Z\"}", "{\"bonus\":false,\"created_at\":\"2012-02-15T15:01:45Z\",\"description\":\"We're going to give the workspace a nickname: \\\"paper\\\". This is so that we can tell it what to do later. This is common in programming- you'll use a nickname so that you can talk to a piece of code later on in your program. \\r\\n\\r\\nSo now go back to line 1 and change it to:\\r\\n\\r\\n<code>paper = makeWorkspace()</code>\",\"freeplay\":false,\"hint\":\"You don't need to call your workspace paper- you can use any nickname you like. Naming it paper will just make it easier for you to follow along the instructions later since we will call it paper.\",\"id\":29,\"image_url\":\"\",\"kit_id\":7,\"more_info\":null,\"position\":2,\"solution\":\"paper = makeWorkspace()\",\"spec\":\"\",\"success_message\":\"What you've done is created a variable called \\\"paper\\\". A variable is what computer programmers call these nicknames. \",\"title\":\"Creating a variable\",\"updated_at\":\"2012-02-15T15:01:45Z\"}", "{\"bonus\":false,\"created_at\":\"2012-02-15T20:47:26Z\",\"description\":\"In the past steps, you used the <code>makeWorkspace</code> method.\\r\\n\\\"Method\\\" is just the vocabulary programmers use--it means \\\"instruction the computer needs to follow\\\".  In real life, a method could be: \\\" \\r\\n\\r\\nBy adding parentheses to the end you told the computer to follow the instructions in the makeWorkspace method. The result was a grid on the screen. \\r\\n\\r\\nIn addition to \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nThe way we will change the background color is to place a colored rectangle over the grid. In the program we are using you can't actually change the color of the background so the next best thing to do is put something on top of it. It's like putting a tablecloth over your table. \\r\\n\\r\\nTo make a rectangle, type:\\r\\n\\r\\n<code>background = paper.rect(0,0,400,400)</code>\\r\\n\\r\\nThen: \\r\\n\\r\\n<code>background.attr('fill', 'royalblue')</code>\\r\\n\\r\\nWe gave the rectangle the nickname 'background' because we still wanted to talk to it. You'll also notice that we used paper again, that nickname allowed us to add things to the paper. We'll continue to use that as we build up our game. \\r\\n\\r\\nThe first line of code creates a square. 'rect' is considered a method with the top left corner at (0,0)- the top left corner of our page. The x,y coordinates were set by the first 2 numbers used by the rectangle. The height and width\\r\\n\\r\\n.attr('fill', 'royalblue')</code>\",\"freeplay\":false,\"hint\":\"\",\"id\":30,\"image_url\":\"\",\"kit_id\":7,\"more_info\":null,\"position\":3,\"solution\":\"\",\"spec\":\"\",\"success_message\":\"\",\"title\":\"Method calls \",\"updated_at\":\"2012-02-15T20:47:26Z\"}"]
